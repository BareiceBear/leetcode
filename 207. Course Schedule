/*
There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Example 1:

Input: 2, [[1,0]] 
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: 2, [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
*/
#define NOVISIT   0
#define VISITING  1
#define VISITED   2

using namespace std;
using graph = vector<vector<int>>;

class Solution {
protected:
    bool hasRing(int no, graph &edges, std::vector<int> &flags)
    {
        for(int i = 0; i < edges[no].size(); ++i)
        {
            if(1 == flags[edges[no][i]])
                return true;

            flags[edges[no][i]] = 1;
            if(hasRing(edges[no][i], edges, flags))
                return true;
            flags[edges[no][i]] = 2;
        }

        return false;
    }

public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> flags(numCourses, 0);
        graph edges(numCourses);
        for(int i = 0; i < prerequisites.size(); ++i)
            edges[prerequisites[i][0]].push_back(prerequisites[i][1]);

        for(int i = 0; i < edges.size(); ++i)
        {
            if(2 == flags[i])
                continue;
        
            flags[i] = 1;
            if(hasRing(i, edges, flags))
                return false;
            flags[i] = 2;
        }

        return true;
    }
};
