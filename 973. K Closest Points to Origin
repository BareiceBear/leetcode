/*
973. K Closest Points to Origin

We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)
 

Note:

1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000
*/

class Solution1 {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        typedef pair<int, double> idxDist;
        vector<idxDist> dist;
        vector<vector<int>> ret;
        for(int i = 0; i < points.size(); ++i)
            dist.push_back(make_pair(i, pow(points[i][0], 2) + pow(points[i][1], 2)));
        
        sort(dist.begin(), dist.end(), [](idxDist a, idxDist b){return a.second < b.second;});
        for(int i = 0; i < K; ++i)
            ret.push_back(points[dist[i].first]);
        
        return ret;
    }
};

typedef pair<int, double> idxDist;

class Solution {
public:
    int kClosestRecur(vector<idxDist> &dists, int lo, int hi)
    {
        random_device rd;
        mt19937 mt(rd());
        uniform_int_distribution uid(lo, hi);
        int num = uid(mt);    
        double sentry = dists[num].second;
        auto it = partition(dists.begin() + lo, dists.begin() + hi, [sentry](const auto& a){
                                                                          return sentry < a.second;});
        return distance(dists.begin() + lo, --it);
    }
    
    void kClosestCore(vector<idxDist> &dists, int lo, int hi, int k)
    {
        if(hi <= lo)
            return;
        
        int pos = kClosestRecur(dists, lo, hi) - lo + 1;
        if(k == pos)
            return;
        else if(k > pos)
            kClosestCore(dists, pos + 1, hi, k - pos);
        else
            kClosestCore(dists, lo, pos -  1, k);
    }
    
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        vector<idxDist> dists;
        vector<vector<int>> ret;
        for(int i = 0; i < points.size(); ++i)
            dists.push_back(make_pair(i, pow(points[i][0], 2) + pow(points[i][1], 2)));
        
        kClosestCore(dists, 0, dists.size() - 1, k);
        for(int i = 0; i < k; ++i)
            ret.push_back(points[dists[i].first]);
        return ret;
    }
};
