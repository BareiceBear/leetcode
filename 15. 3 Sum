/*
Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
*/

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ret;
        if(3 > nums.size())
            return ret;
        
        std::sort(std::begin(nums), std::end(nums), std::less<int>());
        for(int i = 0; i < nums.size() - 2; ++i)
        {
             //if(nums[i] == nums[i + 1]) continue; 跳过了一组解中有两个相同的数的情况
            if(i == 0 || (nums[i - 1] != nums[i] && nums[i] <= 0)) 
            {
                int lo = i + 1;
                int hi = nums.size() - 1;
                while(lo < hi)
                {
                    int sum = nums[i] + nums[lo] + nums[hi];
                    if(0 == sum)
                    {
                        ret.push_back({nums[i], nums[lo], nums[hi]});
                        while(lo < hi && nums[lo] == nums[lo + 1])    //跳过相同数字以避免重复
                            lo++;
                        while(lo < hi && nums[hi] == nums[hi - 1])
                            hi--;
                        lo++;
                        hi--;
                    }
                    else if(sum < 0)
                        ++lo;
                    else
                        --hi;
                }
            }            
        }
        
        return ret;
    }
};
