/*
Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.

Example 1:

Input: 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.
Example 2:

Input: 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.
Note: You may assume that n is not less than 2 and not larger than 58.
*/

class Solution {
public:
    int integerBreak(int n) {
        if(2 == n)
            return 1;
        
        std::vector<int> backup(n + 1, 0);
        backup[1] = 1;
        backup[2] = 1;
        backup[3] = 2;
        
        for(int i = 4; i <= n; ++i)
        {
            int iEnd = i / 2;
            for(int j = 1; j <= iEnd; ++j)
            {
                backup[i] = std::max(backup[i], std::max(j, backup[j]) * std::max(i - j, backup[i - j]));
            }
        }
        
        return backup[n];
    }
};
