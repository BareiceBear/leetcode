/*
74. Search a 2D Matrix

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false
*/

//第一种解法，利用二分查找（python）
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if 0 == len(matrix) or 0 == len(matrix[0]):
            return False
        
        m, n = len(matrix), len(matrix[0])
        lo, hi = 0, m - 1
        mid = hi // 2
        
        //先在第一列开始查找，目的是为了找出目标所在的行
        while lo <= hi:
            if matrix[mid][0] <= target and matrix[mid][n - 1] >= target:
                break
            elif matrix[mid][0] < target:
                lo = mid + 1
            elif matrix[mid][0] > target:
                hi = mid - 1

            mid = (hi - lo) // 2 + lo
        else:
            return False

        //第二次搜索，在目标行进行搜索
        lst = matrix[mid]
        lo, hi = 0, len(lst) - 1
        mid = hi // 2
        while lo <= hi:
            if target == lst[mid]:
                return True
            elif lst[mid] < target:
                lo = mid + 1
            else:
                hi = mid - 1

            mid = (hi - lo) // 2 + lo
        else:
            return False
