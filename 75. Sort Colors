/*
Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: You are not suppose to use the library's sort function for this problem.

Example:

Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Follow up:

A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
Could you come up with a one-pass algorithm using only constant space?
*/

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int head = 0;                   //通过首尾两个指针指示0和2存放的位置
        int tail = nums.size() - 1;
        int offset = 0;
        
        while(offset < nums.size())
        {
            if(0 == nums[offset] && offset > head)  //若 head >= offset，则无需交换，因为head之前必为0
                swap(nums[offset], nums[head++]);
            else if(2 == nums[offset] && offset < tail)  //若 tail <= offset，则无需交换，因为tail之后必为2
                swap(nums[offset], nums[tail--]);
            else
                ++offset;
        }
        
        return;
    }
};
