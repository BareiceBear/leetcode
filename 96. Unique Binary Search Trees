/*
Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
*/

class Solution {
public:
    int numTrees(int n) {
        if(1 == n)
            return 1;
        
        vector backup(n + 1, 0);
        backup[0] = 1;
        backup[1] = 1;
        for(int i = 2; i < n + 1; ++i)
        {
            for(int j = 1; j < i + 1; ++j)
            {
                backup[i] += backup[j - 1] * backup[i - j];
            }
        }
    
        return backup[n];
    }
};
