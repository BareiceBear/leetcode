/*实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。

示例:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // 返回 true
trie.search("app");     // 返回 false
trie.startsWith("app"); // 返回 true
trie.insert("app");   
trie.search("app");     // 返回 true
说明:

你可以假设所有的输入都是由小写字母 a-z 构成的。
保证所有输入均为非空字符串。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/implement-trie-prefix-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <iostream>
#include <string>
#include <assert.h>
#include <vector>

using namespace std;

typedef struct TrieNode
{
public:
	TrieNode() 
		: bIsWordEnd(false)
		, apNode(vector<TrieNode*>(26, nullptr))
	{
		for (int i = 0; i < 26; ++i)
			apNode[i] = nullptr;
	}

	~TrieNode()
	{
		for (int i = 0; i < 26; ++i)
		{
			if (nullptr != apNode[i])
			{
				delete apNode[i];
				apNode[i] = nullptr;
			}
		}
	}

	void setEndChar()
	{
		bIsWordEnd = true;
	}

	bool isEndChar()
	{
		return bIsWordEnd;
	}

	TrieNode *findCharacter(char ch)
	{
		if (ch < 'a' || ch > 'z')
			return nullptr;
		return apNode[ch - 'a'];
	}

	TrieNode * insert(char ch)
	{
		assert(ch >= 'a' && ch <= 'z');
		if (nullptr == apNode[ch - 'a'])
			apNode[ch - 'a'] = new TrieNode;
		return apNode[ch - 'a'];
	}

private:
	vector<TrieNode*> apNode;
	bool bIsWordEnd;
}TrieNode;

class Trie {
public:
	/** Initialize your data structure here. */
	Trie() : pTreeRoot(new TrieNode)
	{

	}

	~Trie()
	{
		delete pTreeRoot;
		pTreeRoot = nullptr;
	}

	/** Inserts a word into the trie. */
	void insert(string word)
	{
		TrieNode *pNode = pTreeRoot;
		for (char ch : word)
		{
			TrieNode *pTmp = pNode->findCharacter(ch);
			if (nullptr == pTmp)
				pNode = pNode->insert(ch);
			else
				pNode = pTmp;
		}

		pNode->setEndChar();
		return;
	}

	/** Returns if the word is in the trie. */
	bool search(string word)
	{
		TrieNode *pNode = pTreeRoot;
		for (char ch : word)
		{
			TrieNode *pTmp = pNode->findCharacter(ch);
			if (nullptr == pTmp)
				return false;
			pNode = pTmp;
		}

		return pNode->isEndChar();
	}

	/** Returns if there is any word in the trie that starts with the given prefix. */
	bool startsWith(string prefix)
	{
		TrieNode *pNode = pTreeRoot;
		for (char ch : prefix)
		{
			TrieNode *pTmp = pNode->findCharacter(ch);
			if (nullptr == pTmp)
				return false;
			pNode = pTmp;
		}

		return true;
	}

private:
	TrieNode *pTreeRoot;
};
