#Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).
#The binary search tree is guaranteed to have unique values.

#Example 1:
#Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
#Output: 32

#Example 2:
#Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
#Output: 23
 
#Note:
#The number of nodes in the tree is at most 10000.
#The final answer is guaranteed to be less than 2^31.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def inOrder(self, root: TreeNode, lst: list):
        if None == root:
            return
        self.inOrder(root.left, lst)
        lst.append(root.val)
        self.inOrder(root.right, lst)
             
    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:
        tree = []
        self.inOrder(root, tree)
        nums = list(filter(lambda fi: L <= fi and fi <= R, tree))  #可以把这部分放到inOrder中
        return sum(nums) if len(nums) > 0 else 0
