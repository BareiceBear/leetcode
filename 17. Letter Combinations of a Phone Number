/*Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.*/

class Solution {
public: 
    void combination(vector<string> &strs, unordered_map<char, string>& maps, string& digits, int pos, string str)
    {
        if(pos == digits.size())
        {
            strs.push_back(str);
            return;
        }
        
        string strNum = maps[digits[pos]];
        for(int i = 0; i < strNum.size(); ++i)
            combination(strs, maps, digits, pos + 1, str + strNum[i]);
    }
    
    vector<string> letterCombinations(string digits) 
    {
        vector<string> strs;
        unordered_map<char, string> maps;
        maps['2'] = "abc";
        maps['3'] = "def";
        maps['4'] = "ghi";
        maps['5'] = "jkl";
        maps['6'] = "mno";
        maps['7'] = "pqrs";
        maps['8'] = "tuv";
        maps['9'] = "wxyz";
        
        string str = maps[digits[0]];
        for(int i = 0; i < str.size(); ++i)
            combination(strs, maps, digits, 1, string().append(1, str[i]));
        
        return strs;
    }
};
